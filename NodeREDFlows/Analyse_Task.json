[{"id":"8897067591c13eee","type":"tab","label":"Analyse_Task","disabled":false,"info":"This flow analyse tasks and progress on the process depending on the conditions"},{"id":"c8af43e032bf3a7a","type":"link in","z":"8897067591c13eee","name":"InAnalyseTask","links":["61b327bdd35d0e07"],"x":175,"y":180,"wires":[["5974143a876c4d7a"]]},{"id":"b59f2d1c6c5b3117","type":"switch","z":"8897067591c13eee","name":"Case Type","property":"activeTask.type","propertyType":"msg","rules":[{"t":"eq","v":"startEvent","vt":"str"},{"t":"eq","v":"serviceTask","vt":"str"},{"t":"eq","v":"parallelGateway","vt":"str"},{"t":"eq","v":"intermediateCatchEvent","vt":"str"},{"t":"eq","v":"endEvent","vt":"str"},{"t":"eq","v":"exclusiveGateway","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":7,"x":960,"y":180,"wires":[["39ebd230f66216bc"],["10280d85ce54aeb0"],["ea4d01a46faf1e1a"],["a974bfcf969a8fe0"],["22cebc377430f0fd"],["aa3404d19ee1b1e7"],["7459f412b1b881c0"]]},{"id":"4af326481026b6ed","type":"change","z":"8897067591c13eee","name":"GetActiveTaskObj","rules":[{"t":"set","p":"activeTask","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":550,"y":180,"wires":[["a2be7ef13b31cf04","b59f2d1c6c5b3117","69d60da8818f7a91"]]},{"id":"90791330b71ec659","type":"comment","z":"8897067591c13eee","name":"Analyse a Ready_To_Start task","info":"This flow analyses the active task's status and performs depending the type of active task identified.","x":290,"y":120,"wires":[]},{"id":"39ebd230f66216bc","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeStartEvent","mode":"link","links":["cc9f698585e61d31"],"x":1125,"y":60,"wires":[]},{"id":"ea4d01a46faf1e1a","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeParallelGateway","mode":"link","links":["d2dba0428611fbd3"],"x":1125,"y":140,"wires":[]},{"id":"a974bfcf969a8fe0","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeIntermediateCatchEvent","mode":"link","links":["c91a368f505f03b9"],"x":1125,"y":180,"wires":[]},{"id":"22cebc377430f0fd","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeEndEvent","mode":"link","links":["e674b9372a64d2de"],"x":1125,"y":220,"wires":[]},{"id":"2eec4564e4d0e434","type":"debug","z":"8897067591c13eee","name":"TaskTypeNotSupported","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"debugMessage","targetType":"msg","statusVal":"","statusType":"auto","x":1480,"y":380,"wires":[]},{"id":"a0698cae14c3a760","type":"comment","z":"8897067591c13eee","name":"Goto: InServiceTask","info":"Links to the serviceTask subflow","x":1240,"y":100,"wires":[]},{"id":"fe9cc9fa67b7358d","type":"comment","z":"8897067591c13eee","name":"Goto: InParallelGateway","info":"Links to the parallelGateway subflow\nWe are not considering that a parallelGateway can happen after another parallelgateway. If this process is possible we should consider this situation for merging purposes","x":1260,"y":140,"wires":[]},{"id":"daac31365510e7ca","type":"comment","z":"8897067591c13eee","name":"Goto: InIntermediateCatchEvent","info":"Links to the intermediateCatchEvent subflow","x":1280,"y":180,"wires":[]},{"id":"9c91f79a4088099f","type":"comment","z":"8897067591c13eee","name":"Goto: InEndEvent","info":"Links to the endEvent subflow","x":1240,"y":220,"wires":[]},{"id":"eaf1d2b58b0eb9b8","type":"comment","z":"8897067591c13eee","name":"Set current task status to: In_Progress","info":"Sets the current Ready_To_Start task to In_Progress","x":310,"y":440,"wires":[]},{"id":"49247a5238c5abaf","type":"link in","z":"8897067591c13eee","name":"InSetTaskStatusToInProgress","links":["a2be7ef13b31cf04"],"x":175,"y":480,"wires":[["0fc1c62e5b789b34"]]},{"id":"0fc1c62e5b789b34","type":"function","z":"8897067591c13eee","name":"PrepareUpdateTaskInProgress","func":"var bpmn_id = msg.activeTask.bpmn_id;\nvar instance_id = msg.activeTask.instance_id;\nmsg.topic = \"UPDATE `active_task` SET `status`='In_Progress' WHERE `bpmn_id`= '\" + bpmn_id + \"' AND `instance_id`= '\" + instance_id + \"'\";\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":480,"wires":[["9bc852828d46d8d2"]]},{"id":"9bc852828d46d8d2","type":"mysql","z":"8897067591c13eee","mydb":"6cf75f29.e3fd6","name":"UpdateActiveTask","x":610,"y":480,"wires":[[]]},{"id":"10280d85ce54aeb0","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeCallService","mode":"link","links":["0ff5ef5156bf71af"],"x":1125,"y":100,"wires":[]},{"id":"aa3404d19ee1b1e7","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeExclusiveGateway","mode":"link","links":["aab73096f8ae16aa"],"x":1125,"y":260,"wires":[]},{"id":"b7cc1caaa9fd446f","type":"comment","z":"8897067591c13eee","name":"Goto: InExclusiveGateway","info":"Links to the exclusiveGateway subflow","x":1260,"y":260,"wires":[]},{"id":"4cd3fcf9a0032d25","type":"function","z":"8897067591c13eee","name":"PrepareInsertNewReadyToStartTask","func":"var processInstanceId = msg.processInstanceId;\nvar nextTaskObj = msg.nextTaskObj;\n\n//prepare insert new Ready_To_Start task  (delete first)\n/*var deleteQuery = \"DELETE FROM active_task \" +\n                  \"WHERE instance_id = \" + processInstanceId + \" \" +\n                  \"AND bpmn_id = '\" + nextTaskObj.$.id + \"'; \";\n*/\nvar insertQuery = \"INSERT INTO active_task\" +\n    \" (bpmn_id, name, type, status, instance_id)\" +\n    \" VALUES ('\" + nextTaskObj.$.id + \"', '\" + nextTaskObj.$.name + \"', '\" + nextTaskObj.$.type + \"', 'Ready_To_Start', \" + processInstanceId + \");\";\n\n//msg.topic = deleteQuery + insertQuery;\nmsg.topic = insertQuery;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":620,"wires":[["8863282baf2de86a"]]},{"id":"8863282baf2de86a","type":"mysql","z":"8897067591c13eee","mydb":"6cf75f29.e3fd6","name":"InsertReadyToStartTask","x":690,"y":620,"wires":[["f76dfd9904a6bf61"]]},{"id":"edd93007edd60d84","type":"function","z":"8897067591c13eee","name":"GetSequenceFlowsForCurrentTask","func":"//get all sequence flows within the xml\nvar arAllSequenceFlows = msg.recipe.definitions.process[0].sequenceFlow;\n\n//get only sequenceFlows of the current task\nvar activeTaskBpmnId = msg.activeTask.bpmn_id;\nvar arActiveTaskSequenceFlows = arAllSequenceFlows.filter(x => x.$.sourceRef == activeTaskBpmnId);\n\nif(! arActiveTaskSequenceFlows){\n    msg.message = \"No sequenceFlows found for current active task «\" + activeTaskBpmnId + \"»\";\n    return;\n}\n\nmsg.payload = arActiveTaskSequenceFlows;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":1360,"wires":[["ed0bf5836275f42b"]]},{"id":"6f0b8fd4f232ea11","type":"comment","z":"8897067591c13eee","name":"Find next task to be processed within the selected sequenceFlow","info":"1) Searchs for the next task to be processed within the selected sequenceFlow\n2) Evaluate if nextTask is parallelGateway, if so, apply join to avoid duplicates\n3) Goto: InInsertNewReadyToStartTask","x":390,"y":1520,"wires":[]},{"id":"b89c74195819d93a","type":"link in","z":"8897067591c13eee","name":"InFindNextTaskToBeExecuted","links":["1ddffbc08b399dfa","4a3d476d65ed1123"],"x":175,"y":1560,"wires":[["bcfadb15dcd81bfb"]]},{"id":"bc578a35283ccc1d","type":"comment","z":"8897067591c13eee","name":"Goto: InStartEvent","info":"In this case, just have to read connected sequence flow and move to the next task","x":1240,"y":60,"wires":[]},{"id":"82e2d815f41e722b","type":"debug","z":"8897067591c13eee","name":"CurrentTask","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"debugMessage","targetType":"msg","statusVal":"","statusType":"auto","x":950,"y":100,"wires":[]},{"id":"69d60da8818f7a91","type":"function","z":"8897067591c13eee","name":"SetDebugMessage","func":"msg.debugMessage = {\n    CurrentTaskType: msg.activeTask.type,\n    CurrentTaskName: msg.activeTask.name,\n    CurrentTaskId: msg.activeTask.bpmn_id\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":100,"wires":[["82e2d815f41e722b"]]},{"id":"a2be7ef13b31cf04","type":"link out","z":"8897067591c13eee","name":"OutGetActiveTaskObj","mode":"link","links":["49247a5238c5abaf"],"x":675,"y":240,"wires":[]},{"id":"8bf3110908f02fc6","type":"comment","z":"8897067591c13eee","name":"Set current task status to: Finished_Treated","info":"1) Update current task to Finished_Treated\n2) If it's an EndEvent task: Terminate the whole process, otherwise\n3) Treat Ready_To_Start tasks","x":1090,"y":440,"wires":[]},{"id":"0d6a507691820598","type":"link in","z":"8897067591c13eee","name":"InSetTaskStatusToFinished","links":["101345166640d1ab","157c952bdab0afcb","161df0a3a030ad2a","265da0a735251ff5","84dbf3873a414092","afd4ddb5192981b6","d99645c2d629a38a"],"x":935,"y":480,"wires":[["aaf63fb9ddb0b3b7"]]},{"id":"aaf63fb9ddb0b3b7","type":"function","z":"8897067591c13eee","name":"PrepareUpdateTaskFinishedTreated","func":"var activeTaskBpmnId = msg.activeTask.bpmn_id;\nmsg.topic = \"UPDATE `active_task` SET `status`='Finished_Treated' WHERE `bpmn_id`= '\" + activeTaskBpmnId + \"' AND `instance_id`= '\" + msg.processInstanceId + \"'\";\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":480,"wires":[["c5392a3aacb4f279"]]},{"id":"c5392a3aacb4f279","type":"mysql","z":"8897067591c13eee","mydb":"6cf75f29.e3fd6","name":"UpdateActiveTask","x":1410,"y":480,"wires":[[]]},{"id":"ed0bf5836275f42b","type":"split","z":"8897067591c13eee","name":"SplitSequenceFlows","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":640,"y":1360,"wires":[["dc0f04445588a06e"]]},{"id":"9c9948162cf3eeb3","type":"comment","z":"8897067591c13eee","name":"ExclusiveGateway: Evaluate which sequenceFlow should be executed","info":"1) Get sequenceFlows linked to the current exclusiveGateway\n2) These sequenceFlows should have conditionExpressions, loop through them\n3) Evaluate each conditionExpression. Select the sequenceFlow that gets true as eval result\n4) Call subflow InMoveFromCurrentActiveTaskToNext","x":410,"y":1120,"wires":[]},{"id":"aab73096f8ae16aa","type":"link in","z":"8897067591c13eee","name":"InExclusiveGateway","links":["aa3404d19ee1b1e7"],"x":175,"y":1180,"wires":[["f5398d8a71caed8b"]]},{"id":"f5398d8a71caed8b","type":"function","z":"8897067591c13eee","name":"EvaluateWhichSequenceFlowShallBeExecuted","func":"//get all sequence flows within the xml\nvar arAllSequenceFlows = msg.recipe.definitions.process[0].sequenceFlow;\n\n//get sequenceFlows linked to the current taks\nvar activeTaskBpmnId = msg.activeTask.bpmn_id;\nvar arActiveTaskSequenceFlows = arAllSequenceFlows.filter(x => x.$.sourceRef == activeTaskBpmnId);\n\nif(! arActiveTaskSequenceFlows){\n    msg.message = \"No sequenceFlows found for current task «\" + activeTaskBpmnId + \"»\";\n    return;\n}\n\n//camunda: the sequence flows of exlusiveGateways should have conditionExpressions, need to loop and evaluate\nvar conditionExpressionBoolResult;\nvar selectedSequenceFlow;\nvar conditionExpression;\n\nif(msg.implementationKind == \"camunda\"){\n    for (var i = 0; i < arActiveTaskSequenceFlows.length; i++) {\n        selectedSequenceFlow  = arActiveTaskSequenceFlows[i];\n        if (!selectedSequenceFlow.conditionExpression){\n            msg.message = \"Error, conditionExpression has not been set to the exclusiveGateway «\" + activeTaskBpmnId + \"»\";\n            return msg;\n        }\n        \n        //get condition expression of current sequenceFlow\n        conditionExpression = selectedSequenceFlow.conditionExpression[0][\"_\"];\n\n        //replace characters not recognized by JS\n        conditionExpression = conditionExpression.replace(\"$\",\"\").replace(\"{\",\"\").replace(\"}\",\"\");\n        \n        //replace variable name by the actual value given by «msg.serviceResponse». if evaluating a string, put \\\" to the value\n        if (conditionExpression.includes(\"\\\"\")) \n            conditionExpression = conditionExpression.replace(msg.serviceResponseParameterName, \"\\\"\"+msg.serviceResponse+\"\\\"\");\n        else\n            conditionExpression = conditionExpression.replace(msg.serviceResponseParameterName, msg.serviceResponse);\n        \n        //evaluate conditionExpression. Select the sequenceFlow that gets true as eval result\n        try {\n            conditionExpressionBoolResult = eval(conditionExpression);\n            if (Boolean(conditionExpressionBoolResult)) break;\n        } catch (error) {\n            msg.message = error.message;\n            conditionExpressionBoolResult = false;\n            break;\n        };\n    }\n}else{\n    msg.message = \"Error, sorry to inform that evaluation of conditionExpressions are supported only for Camunda\";\n    return msg;\n}\n\nmsg.conditionExpression = conditionExpression;\nmsg.conditionExpressionBoolResult = conditionExpressionBoolResult;\nmsg.selectedSequenceFlow = selectedSequenceFlow;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":1180,"wires":[["4a3d476d65ed1123","afd4ddb5192981b6"]]},{"id":"4a3d476d65ed1123","type":"link out","z":"8897067591c13eee","name":"OutExclusiveGateway2","mode":"link","links":["b89c74195819d93a"],"x":685,"y":1220,"wires":[]},{"id":"abbafb23cdc370ef","type":"comment","z":"8897067591c13eee","name":"Get all sequenceFlows of current task","info":"1) Search all sequenceFlows of current active task.\n2) Loop through them","x":310,"y":1320,"wires":[]},{"id":"d3b544bb7ba5db0d","type":"link in","z":"8897067591c13eee","name":"InGetAllSequenceFlowsCurrentTask","links":["1401113c3e61a89d","14a9b333a13a3e90","f22f527a97885946","22c6d85e9384a5e7","dedc823942603590"],"x":175,"y":1360,"wires":[["edd93007edd60d84"]]},{"id":"1ddffbc08b399dfa","type":"link out","z":"8897067591c13eee","name":"OutGetSequenceFlows","mode":"link","links":["b89c74195819d93a"],"x":1105,"y":1360,"wires":[]},{"id":"dc0f04445588a06e","type":"change","z":"8897067591c13eee","name":"SetSelectedSequenceFlow","rules":[{"t":"set","p":"selectedSequenceFlow","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":900,"y":1360,"wires":[["1ddffbc08b399dfa"]]},{"id":"7459f412b1b881c0","type":"function","z":"8897067591c13eee","name":"SetDebugMessage","func":"msg.debugMessage = \"Error, tasks of type «\" + msg.activeTask.type + \"» are not supported yet. This task will be skipped.\"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1200,"y":300,"wires":[["2eec4564e4d0e434","161df0a3a030ad2a","dedc823942603590"]]},{"id":"161df0a3a030ad2a","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeOther","mode":"link","links":["0d6a507691820598"],"x":1385,"y":300,"wires":[]},{"id":"b37aa6a4ef9be320","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeEndEvent","mode":"link","links":["4c9172cb8034d8d3"],"x":425,"y":820,"wires":[]},{"id":"5974143a876c4d7a","type":"delay","z":"8897067591c13eee","name":"DelayTaskExecution","pauseType":"delayv","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":320,"y":180,"wires":[["4af326481026b6ed"]]},{"id":"153f349cb3fa0360","type":"link out","z":"8897067591c13eee","name":"OutMoveFromCurrentActiveTaskToNext","mode":"link","links":["dc96102ec5e01359"],"x":985,"y":620,"wires":[]},{"id":"b79ce2767ce71cbb","type":"comment","z":"8897067591c13eee","name":"Goto: InFinishProcessInstance","info":"","x":590,"y":820,"wires":[]},{"id":"c713873f5d6eacb3","type":"comment","z":"8897067591c13eee","name":"Goto: InTreatReadyToStartTasks","info":"","x":1150,"y":620,"wires":[]},{"id":"bcfadb15dcd81bfb","type":"function","z":"8897067591c13eee","name":"FindNextTaskWithinTheSequenceFlow","func":"//get next taskBpmnId by getting targetRef value of the current sequenceFlow\nvar nextTaskBpmnId = msg.selectedSequenceFlow.$.targetRef;\nvar nextTaskObj;\n\n//find the next task to be executed\nvar processObj = msg.recipe.definitions.process[0];\nfor (let processEntry in processObj) {\n    //the first entry «$» is not a task. dont consider it\n    if (processEntry == '$') continue;\n\n    nextTaskObj = processObj[processEntry].find(x => x.$.id == nextTaskBpmnId);\n    if (nextTaskObj){\n        //set type\n        nextTaskObj.$.type = processEntry;\n        break;\n    }    \n}\n\nif (!nextTaskObj){\n    msg.message = \"Error, task «\" + nextTaskBpmnId + \"» not found\";\n    return msg;\n}\n\nmsg.nextTaskObj = nextTaskObj;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":370,"y":1560,"wires":[["37b9ec0c6dfc2c15"]]},{"id":"3ce9a8687b10d44a","type":"comment","z":"8897067591c13eee","name":"ParallelGateway: Wait for termination of previous tasks","info":"","x":360,"y":920,"wires":[]},{"id":"d2dba0428611fbd3","type":"link in","z":"8897067591c13eee","name":"InParallelGateway","links":["ea4d01a46faf1e1a"],"x":175,"y":980,"wires":[["f926f68f8abfcac2"]]},{"id":"f926f68f8abfcac2","type":"join","z":"8897067591c13eee","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":330,"y":980,"wires":[["14a9b333a13a3e90","265da0a735251ff5"]]},{"id":"14a9b333a13a3e90","type":"link out","z":"8897067591c13eee","name":"OutParallelGateway2","mode":"link","links":["d3b544bb7ba5db0d"],"x":465,"y":1020,"wires":[]},{"id":"f76dfd9904a6bf61","type":"join","z":"8897067591c13eee","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":890,"y":620,"wires":[["153f349cb3fa0360"]]},{"id":"37b9ec0c6dfc2c15","type":"switch","z":"8897067591c13eee","name":"IsParallelGateway?","property":"nextTaskObj.$.type","propertyType":"msg","rules":[{"t":"eq","v":"parallelGateway","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":650,"y":1560,"wires":[["3cc1177b763b96d1"],["d60518bfdd6fb5f4"]]},{"id":"3cc1177b763b96d1","type":"join","z":"8897067591c13eee","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":830,"y":1520,"wires":[["d60518bfdd6fb5f4"]]},{"id":"b92fbb5b58b77045","type":"comment","z":"8897067591c13eee","name":"EndEvent","info":"1) Update current task to Finished_Treated\n2) Terminate the whole process","x":220,"y":740,"wires":[]},{"id":"e674b9372a64d2de","type":"link in","z":"8897067591c13eee","name":"InEndEvent","links":["22cebc377430f0fd"],"x":175,"y":800,"wires":[["157c952bdab0afcb","b37aa6a4ef9be320"]]},{"id":"157c952bdab0afcb","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeEndEvent","mode":"link","links":["0d6a507691820598"],"x":425,"y":780,"wires":[]},{"id":"9bd5fd6261c54a3b","type":"comment","z":"8897067591c13eee","name":"Goto: InSetTaskStatusToFinished","info":"","x":590,"y":780,"wires":[]},{"id":"bee00c22238bfeac","type":"comment","z":"8897067591c13eee","name":"Goto: InFindNextTaskToBeExecuted","info":"","x":1280,"y":1360,"wires":[]},{"id":"afd4ddb5192981b6","type":"link out","z":"8897067591c13eee","name":"OutExclusiveGateway","mode":"link","links":["0d6a507691820598"],"x":685,"y":1180,"wires":[]},{"id":"31257d6acaf23fb0","type":"comment","z":"8897067591c13eee","name":"Goto: InSetTaskStatusToFinished","info":"","x":850,"y":1180,"wires":[]},{"id":"69c42b6c772cfa67","type":"comment","z":"8897067591c13eee","name":"Goto: InFindNextTaskToBeExecuted","info":"","x":860,"y":1220,"wires":[]},{"id":"0a1cb23e8991aeb0","type":"comment","z":"8897067591c13eee","name":"StartEvent","info":"1) Update current task to Finished_Treated\n2) Get next senquenceFlows","x":980,"y":740,"wires":[]},{"id":"cc9f698585e61d31","type":"link in","z":"8897067591c13eee","name":"InStartEvent","links":["39ebd230f66216bc"],"x":935,"y":800,"wires":[["d99645c2d629a38a","1401113c3e61a89d"]]},{"id":"d99645c2d629a38a","type":"link out","z":"8897067591c13eee","name":"OutStartEvent","mode":"link","links":["0d6a507691820598"],"x":1185,"y":780,"wires":[]},{"id":"50fd44e78bf4f3f6","type":"comment","z":"8897067591c13eee","name":"Goto: InSetTaskStatusToFinished","info":"","x":1350,"y":780,"wires":[]},{"id":"1401113c3e61a89d","type":"link out","z":"8897067591c13eee","name":"OutStartEvent","mode":"link","links":["d3b544bb7ba5db0d"],"x":1185,"y":820,"wires":[]},{"id":"71a66d1b77fa12fd","type":"comment","z":"8897067591c13eee","name":"Goto: InGetAllSequenceFlowsCurrentTask","info":"","x":660,"y":1020,"wires":[]},{"id":"219eedec44e63c44","type":"comment","z":"8897067591c13eee","name":"Goto: InGetAllSequenceFlowsCurrentTask","info":"","x":1380,"y":820,"wires":[]},{"id":"7a7128eb8d43d4e6","type":"comment","z":"8897067591c13eee","name":"Insert new Ready_To_Start Task","info":"1) Insert a new task under the status Ready_To_Start\n2) Join because many Ready_To_Start tasks can be inserted\n2) Goto: InTreatReadyToStartTasks","x":290,"y":580,"wires":[]},{"id":"46697c0fc75b864e","type":"link in","z":"8897067591c13eee","name":"InInsertNewReadyToStartTask","links":["d60518bfdd6fb5f4"],"x":175,"y":620,"wires":[["4cd3fcf9a0032d25"]]},{"id":"d60518bfdd6fb5f4","type":"link out","z":"8897067591c13eee","name":"OutFindNextTaskToBeExecuted","mode":"link","links":["46697c0fc75b864e"],"x":945,"y":1560,"wires":[]},{"id":"59eecf8b4dd52095","type":"comment","z":"8897067591c13eee","name":"Goto: InInsertNewReadyToStartTask","info":"","x":1140,"y":1560,"wires":[]},{"id":"265da0a735251ff5","type":"link out","z":"8897067591c13eee","name":"OutParallelGateway","mode":"link","links":["0d6a507691820598"],"x":465,"y":980,"wires":[]},{"id":"0283555407423b2e","type":"comment","z":"8897067591c13eee","name":"Goto: InSetTaskStatusToFinished","info":"","x":630,"y":980,"wires":[]},{"id":"b681ca242fe1a275","type":"comment","z":"8897067591c13eee","name":"IntermediateCatchEvent","info":"","x":1020,"y":920,"wires":[]},{"id":"c91a368f505f03b9","type":"link in","z":"8897067591c13eee","name":"InIntermediateCatchEvent","links":["a974bfcf969a8fe0"],"x":935,"y":980,"wires":[["500923e2178d8c17"]]},{"id":"500923e2178d8c17","type":"join","z":"8897067591c13eee","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1030,"y":980,"wires":[["21e7a86d91160125"]]},{"id":"22c6d85e9384a5e7","type":"link out","z":"8897067591c13eee","name":"OutIntermediateCatchEvent2","mode":"link","links":["d3b544bb7ba5db0d"],"x":1425,"y":1020,"wires":[]},{"id":"f9c4ad9dd61bbdee","type":"comment","z":"8897067591c13eee","name":"Goto: InGetAllSequenceFlowsCurrentTask","info":"","x":1620,"y":1020,"wires":[]},{"id":"101345166640d1ab","type":"link out","z":"8897067591c13eee","name":"OutIntermediateCatchEvent","mode":"link","links":["0d6a507691820598"],"x":1425,"y":980,"wires":[]},{"id":"828f7c01c4d8b497","type":"comment","z":"8897067591c13eee","name":"Goto: InSetTaskStatusToFinished","info":"","x":1590,"y":980,"wires":[]},{"id":"a137df3bb72783af","type":"comment","z":"8897067591c13eee","name":"Goto: InSetTaskStatusToFinished","info":"","x":1540,"y":300,"wires":[]},{"id":"dedc823942603590","type":"link out","z":"8897067591c13eee","name":"OutCaseTypeOther2","mode":"link","links":["d3b544bb7ba5db0d"],"x":1385,"y":340,"wires":[]},{"id":"b65d89fbbd5f707a","type":"comment","z":"8897067591c13eee","name":"Goto: InGetAllSequenceFlowsCurrentTask","info":"","x":1570,"y":340,"wires":[]},{"id":"21e7a86d91160125","type":"function","z":"8897067591c13eee","name":"GetMessageEventDefinition","func":"var currentTaskBpmnId = msg.activeTask.bpmn_id;\nvar implementationKind = msg.implementationKind;\n\n//get all intermediateCatchEvents of the whole process\nvar arIntermediateCatchEvents = msg.recipe.definitions.process[0].intermediateCatchEvent;\n\n//validate recipe should contain at least one ServiceTask\nif (!arIntermediateCatchEvents || arIntermediateCatchEvents.length == 0) {\n    msg.message = \"Error, recipe does not cotain any intermediateCatchEvent task\";\n    return msg;\n}\n\n//get the intermediateCatchEvent to be executed\nvar intermediateCatchEventXmlObj = arIntermediateCatchEvents.find(x => x.$.id == currentTaskBpmnId);\nif (!intermediateCatchEventXmlObj) {\n    msg.message = \"Error, intermediateCatchEvent task «\" + currentTaskBpmnId + \"» not found\";\n    return msg;\n}\n\n//get intermediateCatchEvent's messageRef attribute value\nmsg.intermediateCatchEventMessageRef = intermediateCatchEventXmlObj.messageEventDefinition[0].$.messageRef;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1230,"y":980,"wires":[["101345166640d1ab","22c6d85e9384a5e7","c45ad4f816c11657"]]},{"id":"c45ad4f816c11657","type":"debug","z":"8897067591c13eee","name":"IntermediateCatchEventMessageRef","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"intermediateCatchEventMessageRef","targetType":"msg","statusVal":"","statusType":"auto","x":1560,"y":1060,"wires":[]},{"id":"6cf75f29.e3fd6","type":"MySQLdatabase","name":"","host":"localhost","port":"3306","db":"process","tz":"","charset":"UTF8"}]